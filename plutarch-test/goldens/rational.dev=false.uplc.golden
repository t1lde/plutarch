literal (program 1.0.0 (\i0 -> i1 1 2))
ops.+ (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
ops.- (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i1 (\i0 -> i1 1 1) (\i0 -> i1 3 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
ops.* (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i5 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (i2 (\i0 -> i1 3 1) (\i0 -> i1 2 1))) (i1 (\i0 -> i1 2 1) (i2 (\i0 -> i1 5 1) (\i0 -> i1 2 1)))) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
ops.harmonic-sum (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (i1 (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i2 (\i0 -> i1 1 1) (\i0 -> i1 3 1))) (i2 (\i0 -> i1 1 1) (\i0 -> i1 4 1))) (i2 (\i0 -> i1 1 1) (\i0 -> i1 5 1))) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
ops.multi-product (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (i1 (i2 (i1 (i2 (i1 (i2 (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (\i0 -> i1 2 1)) (\i0 -> i1 3 1)) (\i0 -> i1 3 1)) (\i0 -> i1 4 1)) (\i0 -> i1 4 1)) (\i0 -> i1 5 1)) (\i0 -> i1 5 1)) (\i0 -> i1 6 1)) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
compare (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i1 (\i0 -> i1 2 1) (\i0 -> i1 9 1)) (i1 (\i0 -> i1 3 1) (\i0 -> i1 10 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
round.5/3 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i6 (equalsInteger (modInteger i3 2) 1) (delay (force (i6 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i6 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i6 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 5 1) (\i0 -> i1 3 1))) (force ifThenElse)))
round.4/3 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i6 (equalsInteger (modInteger i3 2) 1) (delay (force (i6 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i6 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i6 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 4 1) (\i0 -> i1 3 1))) (force ifThenElse)))
round.-5/2 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i6 (equalsInteger (modInteger i3 2) 1) (delay (force (i6 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i6 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i6 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 5 1) (\i0 -> i1 2 1)))) (force ifThenElse)))
round.-1/4 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i6 (equalsInteger (modInteger i3 2) 1) (delay (force (i6 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i6 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i6 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 1 1) (\i0 -> i1 4 1)))) (force ifThenElse)))
truncate.5/4 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i5 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i5 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 5 1) (\i0 -> i1 4 1))) (force ifThenElse)))
truncate.7/4 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i5 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i5 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 7 1) (\i0 -> i1 4 1))) (force ifThenElse)))
truncate.1/4 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i5 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i5 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 1 1) (\i0 -> i1 4 1))) (force ifThenElse)))
truncate.-7/4 (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i5 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i5 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 7 1) (\i0 -> i1 4 1)))) (force ifThenElse)))
properFraction.-1/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i14 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i14 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i14 i2 i1 (delay False)) (equalsInteger i2 0) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 2 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
properFraction.-3/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i14 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i14 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 3 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i14 i2 i1 (delay False)) (equalsInteger i2 (subtractInteger 0 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 2 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
properFraction.-4/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i14 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i14 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 4 1) (\i0 -> i1 3 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i14 i2 i1 (delay False)) (equalsInteger i2 (subtractInteger 0 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 3 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i14 i1 (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i3 (equalsInteger i2 0) (delay error) (delay i1)))) (force ifThenElse)))
data.id.0.5 (program 1.0.0 (\i0 -> i1 1 2))
data.id.2 (program 1.0.0 (\i0 -> i1 2 1))
data.id.11/3 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 11 1) (\i0 -> i1 3 1)) (force ifThenElse)))
div by 0.1/0 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i9 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 1 1) (\i0 -> i1 0 1)) (force ifThenElse)))
div by 0.recip 0 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (equalsInteger i3 0) (delay error) (delay i1))) (\i0 -> i1 i2 i3))) (\i0 -> i1 0 1)))
div by 0.1/(1-1) (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i15 (equalsInteger i2 0) (delay error) (delay i1))) (\i0 -> i1 (multiplyInteger i6 i3) i2)) (multiplyInteger i3 i2))))) (\i0 -> i1 1 1) ((\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 1 1) (\i0 -> i1 1 1))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i10 (equalsInteger i2 0) (delay 0) (delay (force (i10 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (i7 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (i3 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force ifThenElse)))