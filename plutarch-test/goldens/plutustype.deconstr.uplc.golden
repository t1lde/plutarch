matching.typed.newtype.normal (program 1.0.0 ((\i0 -> force (force sndPair) (unConstrData i1)) #d8799fd8799f41abffd87a80ff))
matching.typed.newtype.datasum (program 1.0.0 ((\i0 -> force (force sndPair) (unConstrData i1)) #d8799fd8799f41abffd87a80ff))
matching.typed.sumtype(ignore-fields).normal (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger 0 i2) (delay ()) (delay error))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff))
matching.typed.sumtype(ignore-fields).datasum (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger 0 i2) (delay ()) (delay error))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff))
matching.typed.sumtype(partial-match).normal (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger 0 i2) (delay i1) (delay error))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff))
matching.typed.sumtype(partial-match).datasum (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger 0 i2) (delay i1) (delay error))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff))
matching.typed.sumtype(exhaustive).normal.minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).normal.spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).normal.rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).normal.certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87c9fd87e80ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).datasum.minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).datasum.spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).datasum.rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive).datasum.certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87c9fd87e80ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).normal.minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).normal.spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).normal.rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).normal.certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87c9fd87e80ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).datasum.minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).datasum.spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).datasum.rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.typed.sumtype(exhaustive)(ignore-fields).datasum.certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger 1 i2) (delay #02) (delay (force (i5 (equalsInteger 2 i2) (delay #03) (delay (force (i5 (equalsInteger 3 i2) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87c9fd87e80ff) (force ifThenElse)))
matching.raw.newtype (program 1.0.0 ((\i0 -> force (force sndPair) (unConstrData i1)) #d8799fd8799f41abffd87a80ff))
matching.raw.sumtype(ignore-fields) (program 1.0.0 ((\i0 -> force (force ifThenElse (equalsInteger (force (force fstPair) (unConstrData i1)) 0) (delay ()) (delay error))) #d8799f40ff))
matching.raw.sumtype(partial-match) (program 1.0.0 ((\i0 -> (\i0 -> force (force ifThenElse (equalsInteger (force (force fstPair) i1) 0) (delay (force (force sndPair) i1)) (delay error))) (unConstrData i1)) #d8799f40ff))
matching.raw.sumtype(exhaustive).minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger i2 1) (delay #02) (delay (force (i5 (equalsInteger i2 2) (delay #03) (delay (force (i5 (equalsInteger i2 3) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d8799f40ff) (force ifThenElse)))
matching.raw.sumtype(exhaustive).spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger i2 1) (delay #02) (delay (force (i5 (equalsInteger i2 2) (delay #03) (delay (force (i5 (equalsInteger i2 3) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.raw.sumtype(exhaustive).rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger i2 1) (delay #02) (delay (force (i5 (equalsInteger i2 2) (delay #03) (delay (force (i5 (equalsInteger i2 3) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.raw.sumtype(exhaustive).certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i5 (equalsInteger i2 1) (delay #02) (delay (force (i5 (equalsInteger i2 2) (delay #03) (delay (force (i5 (equalsInteger i2 3) (delay #04) (delay #01))))))))) (force (force sndPair) i2)) (force (force fstPair) i1)) (unConstrData i1)) #d87c9fd87e80ff) (force ifThenElse)))
matching.raw.sumtype(exhaustive)(ignore-fields).minting (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> force (i3 (equalsInteger i1 1) (delay #02) (delay (force (i3 (equalsInteger i1 2) (delay #03) (delay (force (i3 (equalsInteger i1 3) (delay #04) (delay #01))))))))) (force (force fstPair) (unConstrData i1))) #d8799f40ff) (force ifThenElse)))
matching.raw.sumtype(exhaustive)(ignore-fields).spending (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> force (i3 (equalsInteger i1 1) (delay #02) (delay (force (i3 (equalsInteger i1 2) (delay #03) (delay (force (i3 (equalsInteger i1 3) (delay #04) (delay #01))))))))) (force (force fstPair) (unConstrData i1))) #d87a9fd8799fd8799f41abff00ffff) (force ifThenElse)))
matching.raw.sumtype(exhaustive)(ignore-fields).rewarding (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> force (i3 (equalsInteger i1 1) (delay #02) (delay (force (i3 (equalsInteger i1 2) (delay #03) (delay (force (i3 (equalsInteger i1 3) (delay #04) (delay #01))))))))) (force (force fstPair) (unConstrData i1))) #d87b9fd87a9f182a0007ffff) (force ifThenElse)))
matching.raw.sumtype(exhaustive)(ignore-fields).certifying (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> force (i3 (equalsInteger i1 1) (delay #02) (delay (force (i3 (equalsInteger i1 2) (delay #03) (delay (force (i3 (equalsInteger i1 3) (delay #04) (delay #01))))))))) (force (force fstPair) (unConstrData i1))) #d87c9fd87e80ff) (force ifThenElse)))
fields.typed.extract-single (program 1.0.0 ((\i0 -> force headList (force (force sndPair) (unConstrData i1))) #d8799fd87a9f41abffd87a80ff))
fields.raw.extract-single (program 1.0.0 ((\i0 -> force headList (force (force sndPair) (unConstrData i1))) #d8799fd87a9f41abffd87a80ff))
combined.typed.toValidatorHash (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger 1 i2) (delay (\i0 -> \i0 -> i2 (unBData (i7 i3)))) (delay (\i0 -> \i0 -> force i1)))) (i5 i2)) (force (force fstPair) i1)) (unConstrData (i2 (i3 (unConstrData i1))))) #d8799fd87a9f41abffd87a80ff) (force headList)) (force (force sndPair))))
combined.raw.toValidatorHash (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force ifThenElse (equalsInteger (force (force fstPair) i1) 0) (delay (\i0 -> \i0 -> force i1)) (delay (\i0 -> \i0 -> i2 (unBData (i5 (i6 i3))))))) (unConstrData (i2 (i3 (unConstrData i1))))) #d8799fd87a9f41abffd87a80ff) (force headList)) (force (force sndPair))))