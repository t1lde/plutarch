pdata.simple (program 1.0.0 ((\i0 -> i1 False 6 "Salut, Monde!") (\i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i3 1 0) [  ]) (force mkCons (iData i2) (force mkCons (bData (encodeUtf8 i1)) [  ]))))))
pdata.simple-value-deconstructed (program 1.0.0 (unConstrData ((\i0 -> i1 False 6 "Salut, Monde!") (\i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i3 1 0) [  ]) (force mkCons (iData i2) (force mkCons (bData (encodeUtf8 i1)) [  ])))))))
pdata.flat-data-deconstructed (program 1.0.0 ((\i0 -> unConstrData ((\i0 -> i1 False False 6 i2 4 False 9 i2 "Hola, Mundo!") (\i0 -> \i0 -> \i0 -> \i0 -> \i0 -> \i0 -> \i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i9 1 0) [  ]) (force mkCons (constrData (force ifThenElse i8 1 0) [  ]) (force mkCons (iData i7) (force mkCons (bData (encodeUtf8 i6)) (force mkCons (iData i5) (force mkCons (constrData (force ifThenElse i4 1 0) [  ]) (force mkCons (iData i3) (force mkCons (bData (encodeUtf8 i2)) (force mkCons (bData (encodeUtf8 i1)) [  ])))))))))))) "Salut, Monde!"))
pdata.shallow-data-deconstructed (program 1.0.0 ((\i0 -> unConstrData ((\i0 -> i1 False (\i0 -> i1 False 6 i3) 4 (\i0 -> i1 False 9 i3) "Hola, Mundo!") (\i0 -> \i0 -> \i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i5 1 0) [  ]) (force mkCons (i4 (\i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i3 1 0) [  ]) (force mkCons (iData i2) (force mkCons (bData (encodeUtf8 i1)) [  ]))))) (force mkCons (iData i3) (force mkCons (i2 (\i0 -> \i0 -> \i0 -> constrData 0 (force mkCons (constrData (force ifThenElse i3 1 0) [  ]) (force mkCons (iData i2) (force mkCons (bData (encodeUtf8 i1)) [  ]))))) (force mkCons (bData (encodeUtf8 i1)) [  ])))))))) "Salut, Monde!"))
fieldFromData.simple (program 1.0.0 (\i0 -> unIData ((\i0 -> force (force ifThenElse (equalsInteger (force (force fstPair) i1) 0) (delay (force headList (force tailList (force (force sndPair) i1)))) (delay (force (force trace "verifySoleConstructor failed" (delay error)))))) (unConstrData i1))))
fieldFromData.nested.flat (program 1.0.0 ((\i0 -> \i0 -> unIData ((\i0 -> force (force ifThenElse (equalsInteger (force (force fstPair) i1) 0) (delay (force headList (i3 (i3 (i3 (i3 (i3 (i3 (force (force sndPair) i1))))))))) (delay (force (force trace "verifySoleConstructor failed" (delay error)))))) (unConstrData i1))) (force tailList)))
fieldFromData.nested.shallow (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i4 (equalsInteger (i5 i1) 0) (delay (\i0 -> i1 ((\i0 -> equalsInteger (i7 (unConstrData i1)) 1) (i7 (i9 i2))) (unIData (i7 (i8 (i9 i2)))) (decodeUtf8 (unBData (i7 (i8 (i8 (i9 i2)))))))) (delay (force (i9 i10 (delay error)))))) (unConstrData i1)) ((\i0 -> force (i3 (equalsInteger (i4 i1) 0) (delay (i5 (i6 (i6 (i6 (i7 i1)))))) (delay (force (i8 i9 (delay error)))))) (unConstrData i1)) (\i0 -> \i0 -> \i0 -> i2)) (force ifThenElse)) (force (force fstPair))) (force headList)) (force tailList)) (force (force sndPair))) (force trace)) "verifySoleConstructor failed"))
pfromData (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (equalsInteger (i3 i1) 0) (delay (\i0 -> i1 ((\i0 -> equalsInteger (i5 (unConstrData i1)) 1) (i5 (i7 i2))) (unIData (i5 (i6 (i7 i2)))) (decodeUtf8 (unBData (i5 (i6 (i6 (i7 i2)))))))) (delay (force (force trace "verifySoleConstructor failed" (delay error)))))) (unConstrData i1) (\i0 -> \i0 -> \i0 -> i2)) (force (force fstPair))) (force headList)) (force tailList)) (force (force sndPair))))